stages:
  - trivy-scan
  - build
  - deploy

variables:
  SCAN_DIR: "manifests" # Directory containing Kubernetes YAML files
  DOCKER_IMAGE: dstubked/nodegoat:$CI_PIPELINE_IID
  ECR_IMAGE: 536697230138.dkr.ecr.ap-southeast-1.amazonaws.com/app/nodegoat:$CI_PIPELINE_IID

trivy-scan:
  stage: trivy-scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    # Scan for vulnerabilities in the code repository
    - echo "Scanning for vulnerabilities..."
    - trivy fs --scanners misconfig,vuln,secret --exit-code 0 --severity HIGH,CRITICAL .

build:
  stage: build
  tags:
    - g-shell-only
  script:
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 536697230138.dkr.ecr.ap-southeast-1.amazonaws.com
    - docker build -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $ECR_IMAGE
    - docker push $ECR_IMAGE

deploy:
  stage: deploy
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - yum update -y
    - yum install -y curl jq
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    - aws secretsmanager get-secret-value --secret-id $KUBECONFIG_SECRET_ARN --query SecretString --output text > kubeconfig
    - export KUBECONFIG=./kubeconfig
    - MONGODB_CREDS=$(aws secretsmanager get-secret-value --secret-id $MONGODB_SECRET_ARN --query SecretString --output text)
    - DB_USERNAME=$(echo $MONGODB_CREDS | jq -r .username)
    - DB_PASSWORD=$(echo $MONGODB_CREDS | jq -r .password)
    - MONGO_IP=$(aws ec2 describe-instances --instance-ids $(echo $MONGODB_INSTANCE_ARN | cut -d'/' -f2) --query "Reservations[].Instances[].PrivateIpAddress" --output text)
    - MONGODB_URI="mongodb://${DB_USERNAME}:${DB_PASSWORD}@${MONGO_IP}:27017/nodegoat?authSource=admin"
    - kubectl create secret generic mongodb-secret --from-literal=MONGODB_URI=$MONGODB_URI --dry-run=client -o yaml | kubectl apply -f -
    - AWS_ACCESS_KEY_ID_TRIMMED=$(echo "$AWS_ACCESS_KEY_ID" | tr -d '[:space:]')
    - AWS_SECRET_ACCESS_KEY_TRIMMED=$(echo "$AWS_SECRET_ACCESS_KEY" | tr -d '[:space:]')
    - kubectl create secret generic aws-credentials --from-literal=AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_TRIMMED" --from-literal=AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_TRIMMED" --dry-run=client -o yaml | kubectl apply -f -
    - sed -i "s|DOCKER_IMAGE|$ECR_IMAGE|g" k8s/deployment.yaml
    - kubectl apply -f k8s/rbac.yaml
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
    # Wait for deployment rollout to complete
    - kubectl rollout status deployment/nodegoat
    # Wait for a new pod to be created and ready
    - echo "Waiting for NodeGoat pod to be ready..."
    - until [ ! -z "$(kubectl get pods --selector=app=nodegoat --field-selector=status.phase=Running --output=jsonpath='{.items[*].metadata.name}')" ]; do
        echo "Waiting for new pod...";
        sleep 5;
      done
    # Get the name of the new pod once it's ready
    - NEW_NODEGOAT_POD=$(kubectl get pods --selector=app=nodegoat --field-selector=status.phase=Running --output=jsonpath='{.items[0].metadata.name}')
    # Run the seed command inside the new NodeGoat pod
    - echo "Running database seed command in pod $NEW_NODEGOAT_POD..."
    - kubectl exec $NEW_NODEGOAT_POD -- npm run db:seed